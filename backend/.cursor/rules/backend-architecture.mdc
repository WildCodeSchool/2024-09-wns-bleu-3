---
description: 
globs: backend/**,backend/**/*
alwaysApply: false
---
# Backend Architecture and Best Practices

This document outlines the architecture, technology stack, and best practices for the backend of this project.

## Technology Stack

The backend is built with the following technologies:

-   **Web Server**: [Express.js](mdc:https:/expressjs.com)
-   **GraphQL Server**: [GraphQL Yoga](mdc:https:/the-guild.dev/graphql/yoga-server)
-   **Database**: [PostgreSQL](mdc:https:/www.postgresql.org)
-   **ORM**: [TypeORM](mdc:https:/typeorm.io)
-   **Language**: [TypeScript](mdc:https:/www.typescriptlang.org)

## Project Structure

The backend source code is located in the `backend/src/` directory. The structure is organized as follows:

-   **[`backend/src/config/`](mdc:backend/src/config)**: Contains configuration files for the application, such as database connection details and environment variable handling.
-   **[`backend/src/cron/`](mdc:backend/src/cron)**: Holds scheduled tasks and cron jobs.
-   **[`backend/src/entities/`](mdc:backend/src/entities)**: Defines the TypeORM entities, which are classes that map to database tables.
-   **[`backend/src/inputs/`](mdc:backend/src/inputs)**: Contains GraphQL input types, used for mutations and queries.
-   **[`backend/src/migrations/`](mdc:backend/src/migrations)**: Stores database migration files generated by TypeORM. All database schema changes should be managed through these migrations.
-   **[`backend/src/resolver/`](mdc:backend/src/resolver)**: Contains the GraphQL resolvers. This is where the business logic for handling queries, mutations, and subscriptions is implemented.
-   **[`backend/src/schema/`](mdc:backend/src/schema)**: Holds the GraphQL schema definition files (`.graphql`). This project follows a schema-first approach.
-   **[`backend/src/utils/`](mdc:backend/src/utils)**: A collection of utility functions and helper modules used across the application.
-   **[`backend/src/@types/`](mdc:backend/src/@types)**: Contains custom TypeScript type definitions.

## Best Practices

To maintain code quality and consistency, please adhere to the following best practices:

1.  **Schema-First Development**: Always define your API contracts in the GraphQL schema files (`.graphql`) located in `backend/src/schema/` before implementing the corresponding resolvers.
2.  **Strong Typing**: Use `graphql-codegen` to automatically generate TypeScript types from your GraphQL schema. This ensures that your resolvers, inputs, and model layers are always in sync with your API definition.
3.  **Separation of Concerns**:
    -   **Resolvers**: Should contain the business logic.
    -   **Entities**: Should only represent the database schema.
    -   **Services (if applicable)**: For more complex business logic that can be shared across multiple resolvers, consider creating service classes.
4.  **Database Migrations**: Never modify the database schema directly. Use TypeORM's migration commands to generate and apply schema changes. This ensures a consistent database state across all environments.
5.  **Environment Configuration**: Manage environment-specific configurations using `.env` files. The configuration should be loaded in the `backend/src/config` module.
6.  **Dependency Injection**: Use a dependency injection framework like `TypeDI` to manage dependencies between different parts of the application, especially for injecting services and repositories into resolvers.
7.  Use Context7 for documentation
